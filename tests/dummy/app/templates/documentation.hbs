{{!-- To add shadow main-content-container-shadow --}}
<div class="col-md-10 col-md-offset-2 left-border main-content-container">
  <h1>API &amp; Documentation</h1>
  <h2>Ember.Table.TableComponent Options</h2>

  <table class="table ember-table-options">
    <tr>
      <th style="min-width: 200px;">Option</th>
      <th style="min-width: 150px;">Default</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>content <b>(required)</b></td>
      <td>[]</td>
      <td>
        <p>
          An array of row objects, or a promise that resolves to an array 
          of row objects (so compatible with ember-data). 
          Usually each row is a hash where the keys are column
          names and the values are the rows's values. However, could be any
          object, since each column can define a function to return the column
          value given the row object. See
          <code>Ember.Table.ColumnDefinition.getCellContent</code>.
        </p>
      </td>
    </tr>
    <tr>
      <td>columns <b>(required)</b></td>
      <td>null</td>
      <td>
        <p>
          An array of column definitions: see
          <code>Ember.Table.ColumnDefinition</code>.  Allows each column to
          have its own configuration.
        </p>
      </td>
    </tr>
    <tr>
      <td>numFixedColumns</td>
      <td>0</td>
      <td>
        <p>
          The number of fixed columns on the left side of the table. Fixed
          columns are always visible, even when the table is scrolled
          horizontally.
        </p>
      </td>
    </tr>
    <tr>
      <td>numFooterRow</td>
      <td>0</td>
      <td>
        <p>
          The number of footer rows in the table. Footer rows appear at the
          bottom of the table and are always visible.
        </p>
      </td>
    </tr>
    <tr>
      <td>rowHeight</td>
      <td>30</td>
      <td>
        <p>
          The row height in pixels. A consistent row height is necessary to
          calculate which rows are being shown, to enable lazy rendering.
        </p>
      </td>
    </tr>
    <tr>
      <td>minHeaderHeight</td>
      <td>30</td>
      <td>
        <p>
          The minimum header height in pixels. Headers will grow in height if
          given more content than they can display.
        </p>
      </td>
    </tr>
    <tr>
      <td>footerHeight</td>
      <td>30</td>
      <td><p>The footer height in pixels.</p></td>
    </tr>
    <tr>
      <td>hasHeader</td>
      <td>true</td>
      <td><p>Enables or disables the header block.</p></td>
    </tr>
    <tr>
      <td>hasFooter</td>
      <td>true</td>
      <td><p>Enables or disables the footer block.</p></td>
    </tr>
    <tr>
      <td>enableColumnReorder</td>
      <td>true</td>
      <td>
        <p>
          Allow the columns to be rearranged by drag-and-drop. Only columns
          with <code>isSortable=true</code> (the default setting) will be
          affected.
        </p>
      </td>
    </tr>
    <tr>
      <td>enableContentSelection</td>
      <td>false</td>
      <td><p>Allow users to select the content of table cells.</p></td>
    </tr>
    <tr>
      <td>styleBindings</td>
      <td>'height'</td>
      <td>
        <p>
          Values which are bound to the table's style attr. See
          <code>Ember.StyleBindingsMixin</code> documentation for more details.
        </p>
      </td>
    </tr>
    <tr>
      <td>columnMode</td>
      <td>'standard'</td>
      <td>
        <p>
          Sets which column resizing behavior to use. Possible values are
          <code>'standard'</code> (resizing a column pushes or pulls all other
          columns) and <code>'fluid'</code> (resizing a column steals width
          from neighboring columns). You can experiment with this behavior in
          the {{#link-to 'configurable-columns'}}configurable column
          demo.{{/link-to}}
        </p>
      </td>
    </tr>
    <tr>
      <td>selectionMode</td>
      <td>'single'</td>
      <td>
        <p>
          Sets which row selection behavior to follow. Possible values are
          <code>'none'</code> (clicking on a row does nothing),
          <code>'single'</code> (clicking on a row selects it and deselects
          other rows), and <code>'multiple'</code> (multiple rows can be
          selected through ctrl/cmd-click or shift-click).
        </p>
      </td>
    </tr>
    <tr>
      <td>selection (output)</td>
      <td>undefined</td>
      <td>
        <p>
          An array of the rows currently selected. If
          <code>selectionMode</code> is set to <code>'single'</code>, the array
          will contain either one or zero elements.
        </p>
      </td>
    </tr>
  </table>

  <h2>Ember.Table.ColumnDefinition Options</h2>
  <table class="table ember-table-options">
    <tr>
      <th style="min-width: 200px;">Option</th>
      <th style="min-width: 150px;">Default</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>headerCellName</td>
      <td>undefined</td>
      <td><p>Name of the column, to be displayed in the header.</p></td>
    </tr>
    <tr>
      <td>contentPath</td>
      <td>undefined</td>
      <td>
        <p>
          Path of the content for this cell. If the row object is a hash of
          keys and values to specify data for each column,
          <code>contentPath</code> corresponds to the key. Use either this or
          <code>getCellContent</code>.
        </p>
      </td>
    </tr>
    <tr>
      <td>minWidth</td>
      <td>25</td>
      <td>
        <p>
          Minimum column width in pixels. Affects both manual resizing and
          automatic resizing.
        </p>
      </td>
    </tr>
    <tr>
      <td>maxWidth</td>
      <td>undefined</td>
      <td>
        <p>
          Maximum column width in pixels. Affects both manual resizing and
          automatic resizing.
        </p>
      </td>
    </tr>
    <tr>
      <td>savedWidth</td>
      <td>150</td>
      <td>
        <p>
          The initial column width in pixels. Updated whenever the column (not
          window) is resized. Can be persisted.
        </p>
      </td>
    </tr>
    <tr>
      <td>isResizable</td>
      <td>true</td>
      <td><p>Whether the column can be manually resized.</p></td>
    </tr>
    <tr>
      <td>isSortable</td>
      <td>true</td>
      <td>
        <p>
          Whether the column can be rearranged with other columns. Only matters
          if the table's <code>enableColumnReorder</code> property is set to
          true (the default).
        </p>
      </td>
    </tr>
    <tr>
      <td>textAlign</td>
      <td>'text-align-right'</td>
      <td>
        <p>
          Alignment of the text in the cell. Possible values are
          <code>'left'</code>, <code>'center'</code>, and <code>'right'</code>.
        </p>
      </td>
    </tr>
    <tr>
      <td>canAutoResize</td>
      <td>false</td>
      <td>
        <p>
          Whether the column can automatically resize to fill space in the
          table.
        </p>
      </td>
    </tr>
    <tr>
      <td>headerCellView</td>
      <td>'Ember.Table.HeaderCell'</td>
      <td>
        <p>
          Override to use a custom view for the header cell. Specified as a
          string.
        </p>
      </td>
    </tr>
    <tr>
      <td>tableCellView</td>
      <td>'Ember.Table.TableCell'</td>
      <td>
        <p>
          Override to use a custom view for table cells. Specified as a string.
        </p>
      </td>
    </tr>
    <tr>
      <td>getCellContent</td>
      <td>(function)</td>
      <td>
        <p>
          Override to customize how the column gets data from each row object.
          Given a row, should return a formatted cell value, e.g. $20,000,000.
          Use either this or <code>contentPath</code>.
        </p>
      </td>
    </tr>
    <tr>
      <td>setCellContent</td>
      <td>Ember.K</td>
      <td>
        <p>
          Override to maintain a consistent path to update cell values.
          Recommended to make this a function which takes (row, value) and
          updates the row value.
        </p>
      </td>
    </tr>
  </table>

  <h2>Ember.Table.TableCell Options</h2>
  <table class="table ember-table-options">
    <tr>
      <th style="min-width: 200px;">Option</th>
      <th style="min-width: 150px;">Default</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>templateName</td>
      <td>'table-cell'</td>
      <td>
        <p>The name of the template to be rendered into the cell.
        Used for rendering custom templates.
        </p>
      </td>
    </tr>
    <tr>
      <td>classNames</td>
      <td>['ember-table-cell']</td>
      <td><p>The class names applied to the cell. Override to give
        the cell custom styling (border, background color, etc).</p></td>
    </tr>
    <tr>
      <td>classNameBindings</td>
      <td>'column.textAlign'</td>
      <td><p>A binding used to dynamically associate class names
        with this table cell. E.g. you can bind to a column property
        to have cell colors or styles vary across columns.</p></td>
    </tr>
    <tr>
      <td>styleBindings</td>
      <td>'width'</td>
      <td>
        <p>
          Values which are bound to the cell's style attr. See
          <code>Ember.StyleBindingsMixin</code> documentation for more details.
        </p>
      </td>
    </tr>
  </table>

  <h2>Ember.Table.HeaderCell Options</h2>
  <table class="table ember-table-options">
    <tr>
      <th style="min-width: 200px;">Option</th>
      <th style="min-width: 150px;">Default</th>
      <th>Description</th>
    </tr>
    <tr>
      <td>templateName</td>
      <td>'header-cell'</td>
      <td><p>See description in <code>Ember.Table.TableCell</code>.</p></td>
    </tr>
    <tr>
      <td>classNames</td>
      <td>['ember-table-cell', 'ember-table-header-cell']</td>
      <td><p>See description in <code>Ember.Table.TableCell</code>.</p></td>
    </tr>
    <tr>
      <td>classNameBindings</td>
      <td>['column.isSortable:sortable', 'column.textAlign']</td>
      <td><p>See description in <code>Ember.Table.TableCell</code>.</p></td>
    </tr>
    <tr>
      <td>styleBindings</td>
      <td>['width', 'height']</td>
      <td><p>See description in <code>Ember.Table.TableCell</code>.</p></td>
    </tr>
  </table>
</div>
